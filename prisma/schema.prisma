// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  followingIds    String[] @db.ObjectId
  followerIds     String[] @db.ObjectId
  hasNotification Boolean? 
  profileFieldsIds String[] @db.ObjectId
  bookmarksIds String[] @db.ObjectId
  profileFields Field[] 

  posts         Post[]
  reposts Repost[]
  comments      Comment[]
  notifications Notification[]
  coverimages CoverImage[] 
}

model Post {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  likedIds           String[] @db.ObjectId
  image              String?
  repostId String? @db.ObjectId
  parentId String? @db.ObjectId  
  parentUsername String?
  commentIds String[] @db.ObjectId
  repostIds String[] @db.ObjectId

  bookmarkedIds String[] @db.ObjectId 
  repost Repost? @relation(fields: [repostId],references: [id] , onDelete: Cascade) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  comments Comment[]  
  notifications Notification[] 
}

model Comment {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  postId             String @db.ObjectId
  likingIds String[] @db.ObjectId
  parentId String @db.ObjectId 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
   
}

model Notification {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  userId             String @db.ObjectId
  actionUser         String @db.ObjectId
  actionUsername     String
  type String
  createdAt          DateTime @default(now())
  postId             String? @db.ObjectId
  user               User @relation(fields: [actionUser], references: [id], onDelete: Cascade)
  post               Post? @relation(fields: [postId], references: [id], onDelete:Cascade)
}

model Repost{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quoto String?  
  body String 
  postId String @db.ObjectId
  userId String @db.ObjectId 
  createdAt DateTime @db.Date @default(now())
  updatedAt DateTime @updatedAt   
  user User @relation(fields: [userId],references: [id],onDelete:Cascade)  
  posts Post[]
}

model Field {
  id              String @id @default(auto()) @map("_id") @db.ObjectId 
  value String
  type  String
  userId String @db.ObjectId
  user  User    @relation(fields: [userId], references: [id])
}

model CoverImage{
   id              String @id @default(auto()) @map("_id") @db.ObjectId
   imageUrl String
   userId String @db.ObjectId @unique
   user User @relation(fields: [userId], references: [id])
}
 
 model Hashtag{
   id              String @id @default(auto()) @map("_id") @db.ObjectId
   name String 
   location String 
   userIds String[] @db.ObjectId
   postIds String[] @db.ObjectId
   count Int? @default(0)
   createdAt          DateTime @default(now())
   updatedAt          DateTime @updatedAt
 }